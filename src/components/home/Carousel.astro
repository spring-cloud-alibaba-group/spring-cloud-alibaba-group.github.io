---
interface Props {
    useduration?: string;   // 是否启用自动轮播  apply / disabled
    duration?: number;      // 图片轮播时间 例如: 1000。 （组件默认 5000s）
}

const {
    duration=5000,
    useduration="disabled",
} = Astro.props as Props;
---

<user-carousel>
<div 
    id="carousel-wrapper" 
    class="max-w-[90rem] mx-auto relative flex flex-col justify-center items-center bg-base-100" 
    data-duration={duration}
    data-useduration={useduration}
>
    <div class="lg:max-w-[90rem] w-full">
        <div class="carousel-item block">
            <slot name="prev"></slot>
        </div>
    
        <div class="carousel-item hidden">
            <slot name="next"></slot>
        </div>
    </div>

    <!-- 轮播控制按钮 -->
    <div class='max-w-[85.125rem] absolute bottom-[20px] left-[2.5rem]' >
    
    <div class="w-[112px]  flex justify-between ">
        <div id="prev" class="cursor-pointer group">
            <svg class="group-hover:hidden" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" version="1.1" width="48" height="30" viewBox="0 0 48 30"><g transform="matrix(-1,0,0,1,96,0)"><g><rect x="48" y="0" width="48" height="30" rx="15" fill="#E6F5E7" fill-opacity="1"/></g><g><g><rect x="63" y="3" width="24" height="24" rx="0" fill-opacity="0" stroke-opacity="1" stroke="#060E07" fill="none" stroke-width="0"/></g><g><path d="M84,15.75L60,15.75L60,14.25L84,14.25L84,15.75Z" fill-rule="evenodd" fill="#6B8A88" fill-opacity="1"/></g><g><path d="M85.06066,15L78.53033,8.46967L77.46967,9.53033L82.93934,15L77.46967,20.4697L78.53033,21.5303L85.06066,15Z" fill-rule="evenodd" fill="#6B8A88" fill-opacity="1"/></g></g></g></svg>
            <svg class="hidden group-hover:block" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" version="1.1" width="48" height="30" viewBox="0 0 48 30"><g transform="matrix(-1,0,0,1,96,0)"><g><rect x="48" y="0" width="48" height="30" rx="15" fill="#E6F5E7" fill-opacity="1"/></g><g><g><rect x="63" y="3" width="24" height="24" rx="0" fill-opacity="0" stroke-opacity="1" stroke="#060E07" fill="none" stroke-width="0"/></g><g><path d="M84,15.75L60,15.75L60,14.25L84,14.25L84,15.75Z" fill-rule="evenodd" fill="#2B3B3A" fill-opacity="1"/></g><g><path d="M85.06066,15L78.53033,8.46967L77.46967,9.53033L82.93934,15L77.46967,20.4697L78.53033,21.5303L85.06066,15Z" fill-rule="evenodd" fill="#2B3B3A" fill-opacity="1"/></g></g></g></svg>
        </div>
        <div id="next" class="cursor-pointer ml-[16px] group">
            <svg class="rotate-180 group-hover:hidden" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" version="1.1" width="48" height="30" viewBox="0 0 48 30"><g transform="matrix(-1,0,0,1,96,0)"><g><rect x="48" y="0" width="48" height="30" rx="15" fill="#E6F5E7" fill-opacity="1"/></g><g><g><rect x="63" y="3" width="24" height="24" rx="0" fill-opacity="0" stroke-opacity="1" stroke="#060E07" fill="none" stroke-width="0"/></g><g><path d="M84,15.75L60,15.75L60,14.25L84,14.25L84,15.75Z" fill-rule="evenodd" fill="#6B8A88" fill-opacity="1"/></g><g><path d="M85.06066,15L78.53033,8.46967L77.46967,9.53033L82.93934,15L77.46967,20.4697L78.53033,21.5303L85.06066,15Z" fill-rule="evenodd" fill="#6B8A88" fill-opacity="1"/></g></g></g></svg>
            <svg class="rotate-180 hidden group-hover:block" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" version="1.1" width="48" height="30" viewBox="0 0 48 30"><g transform="matrix(-1,0,0,1,96,0)"><g><rect x="48" y="0" width="48" height="30" rx="15" fill="#E6F5E7" fill-opacity="1"/></g><g><g><rect x="63" y="3" width="24" height="24" rx="0" fill-opacity="0" stroke-opacity="1" stroke="#060E07" fill="none" stroke-width="0"/></g><g><path d="M84,15.75L60,15.75L60,14.25L84,14.25L84,15.75Z" fill-rule="evenodd" fill="#2B3B3A" fill-opacity="1"/></g><g><path d="M85.06066,15L78.53033,8.46967L77.46967,9.53033L82.93934,15L77.46967,20.4697L78.53033,21.5303L85.06066,15Z" fill-rule="evenodd" fill="#2B3B3A" fill-opacity="1"/></g></g></g></svg>
        </div>
    </div>
</div>
</div>
</user-carousel>

<script>
  class UserCarousel extends HTMLElement {
    private carousel_items?: HTMLElement[];
    private nextBtn?: HTMLElement;
    private prevBtn?: HTMLElement;
    private useduration?: string;
    private duration?: any;
    private currentItem?: number;
    private timer?: any;
    constructor() {
        super();
        // 包裹元素
        const carouselWrapper = document.getElementById('carousel-wrapper'); 
        // 利用 html dataset 获取 props 变量参数
        this.duration = carouselWrapper?.dataset?.duration;
        this.useduration = carouselWrapper?.dataset?.useduration;
        this.carousel_items = Array.from(document.querySelectorAll('.carousel-item'));
        this.nextBtn = document.getElementById('next');
        this.prevBtn = document.getElementById('prev');
        this.currentItem = 0;
        this.timer = null;

        // 依据 proos.useduration 判断是否默认开启 循环切换图片
        if(this.useduration == 'apply') {
            // 鼠标划入 停止轮播
            carouselWrapper.addEventListener('mouseenter',() =>{
                if(this.timer) {
                    clearTimeout(this.timer);
                    this.timer = null;
                };
            });
            // 鼠标划出 继续轮播
            carouselWrapper.addEventListener('mouseleave',() =>{
                if(!this.timer) {
                    this.timerStart();
                };
            });
        };
    };

    connectedCallback() {
        this.start();
        // 默认开启
        this.timerStart();
    };

    disconnectedCallback() {
        if(this.timer) {
            clearTimeout(this.timer);
        }
    };

    start = () => {
        // 下一项
        this.nextBtn.addEventListener('click', () => {
            this.currentItem = (this.currentItem + 1) % this.carousel_items.length;
            this.showItem(this.currentItem);
        });
        // 上一项
        this.prevBtn.addEventListener('click', () => {
            this.currentItem = (this.currentItem - 1 + this.carousel_items.length) % this.carousel_items.length;
            this.showItem(this.currentItem);
        });
    };

    showItem = (index) => {
        this.carousel_items.forEach((item, idx) => {
            item.style.display = 'none';
            if (idx === index) {
                item.style.display = 'block';
            };
        });
    };

    switchPicture = () => {
        if(this.timer) {
            this.prevBtn.click();
            this.timer = null;
            this.timerStart();
        };
    };

    timerStart = () => {
        this.timer = setTimeout(this.switchPicture, this.duration);
    };

  };

  customElements.define("user-carousel", UserCarousel);
</script>
