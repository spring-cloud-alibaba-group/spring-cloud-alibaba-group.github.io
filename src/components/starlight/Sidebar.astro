---
import type { Props } from '@astrojs/starlight/props';
import { MobileMenuFooter } from 'virtual:starlight/components';
import SidebarSublist from './SidebarSublist.astro';
import { useTranslations } from '@i18n/util';

const t = useTranslations(Astro);

const { sidebar } = Astro.props;

---
<blog-theme >
  <SidebarSublist sublist={sidebar} />
</blog-theme>

<script>
	type Theme = 'auto' | 'dark' | 'light';

  // 设置博客详情的主题为light
	const key = Symbol('key');

class StarlightThemeSelect extends HTMLElement {
	constructor() {
		super();
		this[key] = 'starlight-theme';
		this.onThemeChange('light');
	}

	parseTheme(theme) {
		// if (theme === 'auto' || theme === 'dark' || theme === 'light') {
		// 	return theme;
		// } else {
		// 	return 'auto';
		// }
	}

	getPreferredColorScheme() {
		return matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
	}

	onThemeChange(theme) {
		document.documentElement.dataset.theme =
			theme === 'auto' ? this.getPreferredColorScheme() : theme;
		this.storeTheme(theme);
	}

	storeTheme(theme) {
		if (typeof localStorage !== 'undefined') {
			if (theme === 'light' || theme === 'dark') {
				localStorage.setItem(this[key], theme);
			} else {
				localStorage.removeItem(this[key]);
			}
		}
	}

	loadTheme() {
		const theme = typeof localStorage !== 'undefined' && localStorage.getItem(this[key]);
		return this.parseTheme(theme);
	}
}

	customElements.define('blog-theme', StarlightThemeSelect);
</script>